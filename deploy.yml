- hosts: all
  vars_files:
    - ../ansible_vars.yml
    - vars_derived.yml
  sudo: yes
  sudo_user: "{{ project_user }}"

  tasks:
    - name: checkout repo
      git: repo={{ project_git_repo }}
           dest={{ project_root }}/application
           version={{ project_git_version }}
      notify: reload apache2

    # FIXME: make this more elegant
    # update settings for staging if needed
    - name: update settings to staging if needed
      shell: if test -e {{ project_root }}/application/django_project/settings_staging.py; then mv {{ project_root }}/application/django_project/settings_staging.py  {{ project_root }}/application/django_project/settings_production.py; fi
      when: inventory_hostname in groups.staging

    # only create db password if its not there already
    - name: check if db-password exists
      shell: test -e {{ project_root }}/application/django_project/db-password
      register: result
      ignore_errors: True
      tags: db
    - name: create db-password
      copy: src=../non-git-files/{{ inventory_hostname }}.db-password
            dest={{ project_root }}/application/django_project/db-password
      when: result|failed
      tags: db

    - name: create static data symlink
      file: state=link 
            src={{ project_root }}/application/{{project_name}}/static/ 
            dest={{ project_root }}/public_html/static

    - name: Upgrade virtualenv
      pip: requirements={{ project_root }}/application/requirements.txt
           virtualenv={{ project_virtual_env }} 
           virtualenv_site_packages=yes

    - name: Upgrade virtualenv dev dependencies
      pip: requirements={{ project_root }}/application/requirements_dev.txt
           virtualenv={{ project_virtual_env }} 
           virtualenv_site_packages=yes
      ignore_errors: True

    - name: create ldap-password
      copy: src=../non-git-files/ldap-password
            dest={{ project_root }}/application/django_project/ldap-password
      when: project_uses_ldap

    - name: copy the admin css/js in place
      shell: cp -ar {{ project_root }}/venv/lib/python2.7/site-packages/django/contrib/admin/static/admin/ {{ project_root }}/public_html/static/admin 

    - name: Run first time init
      shell: if [ -e {{ project_root }}/application/django_project/first_time_init.py ]; then {{ project_virtual_env }}/bin/python {{ project_root }}/application/django_project/first_time_init.py; fi

    - name: set ALLOWED_HOSTS
      lineinfile: regexp='^ALLOWED_HOSTS'
                  dest={{ project_root }}/application/django_project/settings_production.py
                  line="ALLOWED_HOSTS=['{{ project_server_name }}', '{{ project_server_fqdn }}' ]"
        

    - name: set log dir permissions so that www-data can write to it
      file: path={{ project_root }}/application/logs mode=1777 state=directory

    # npm module needs ansible 1.2+
    - name: install bower
      #npm: name=bower version={{ bower_version }}
      #     path={{ project_root }}/node_modules
      shell: chdir={{ project_root }}
             npm install bower

    - name: Run bower
      shell: chdir={{ project_root }}/application
             {{ project_root }}/node_modules/bower/bin/bower install

    - name: Sync django db
      shell: DJANGO_SETTINGS_MODULE=django_project.settings_production
             {{ project_virtual_env }}/bin/python 
             {{ project_root }}/application/manage.py syncdb --noinput
      tags: db

    - name: Migrate django db
      shell: DJANGO_SETTINGS_MODULE=django_project.settings_production
             {{ project_virtual_env }}/bin/python 
             {{ project_root }}/application/manage.py migrate
      when: project_uses_south
      tags: db

    - name: Setup cron daily jobs
      cron: name="{{ item.name }}" job="{{ item.job }}" hour="{{ item.hour }}" minute="5"
      with_items:
        $project_cron_daily_jobs
      tags: cron
      when: project_cron_daily_jobs is defined

    - name: Update i18n
      shell: chdir={{ project_root }}/application/{{ project_name }}
             DJANGO_SETTINGS_MODULE=django_project.settings_production
             {{ project_virtual_env }}/bin/python 
             {{ project_root }}/application/manage.py compilemessages

    - name: Run the tests
      shell: chdir={{ project_root }}/application/{{ project_name }}
             {{ project_virtual_env }}/bin/python 
             {{ project_root }}/application/manage.py test {{ project_name }}

  handlers:
    - include: handlers.yml
